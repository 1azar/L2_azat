package main

import (
	"fmt"
)

/*
СТРОИТЕЛЬ - то порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово.
Паттерн предлагает вынести конструирование объекта за пределы его собственного класса,
	поручив это дело отдельным объектам, называемым строителями. Чтобы создать объект,
	вам нужно поочерёдно вызывать методы строителя. Причём не нужно запускать все шаги,
	а только те, что нужны для производства объекта определённой конфигурации.

ДИРЕКТОР - выделение вызова методов строителя в отдельный класс. Директор полезен, если у вас есть несколько способов
	конструирования продуктов, отличающихся порядком и наличием шагов конструирования.
	В этом случае вы сможете объединить всю эту логику в одном классе.

Преимущества:
	1) Позволяет создавать объекты пошагово. Что делает код удобно читаемым.
	2) Позволяет использовать один и тот же код для создания различных объектов.
	3) Лаконичнее код бизнес логики тк сложный код сборки изолирован от нее. Процесс сборки отделен от представления.
	4) Упрощает создание сложных объектов с большим количеством параметров и настроек

Недостатки:
	1) Введение дополнительных классов усложняет код программы.
	2) Если не использовать директора есть риск создать объект в неполной инициализации.
	3) Использование паттерна для простых объектов может быть избыточным из-за большого объема дополнительного кода

Сценарий применимости:
	1) Огромный конструктор объекта с множеством параметров, имеющий множество вариантов настроек и конфигураций.
	2) Когда нужно создавать различные варианты объекта. Если создание представления нескольких объектов состоит из одинаковых этапов, которые отличаются в деталях.
	3) Когда требуется гибкость и расширяемость в создании объектов. Например, предполагается, что объект в дальнейшем усложнится и потребуется менять код его инициализации

Пример: система генерации отчетов, отчет - объект, для различных групп людей отчет должен быть индивидуален, но может содержать одинаковые блоки.

Альтернатива: options pattern для объектов с относительно небольшим количеством параметров
*/

func main() {
	/*
		Задача: создать отчет (чек) о покупке.
		Для покупателя и продавца чек имеет различную структуру.

		Без применения паттерна строитель, потребовалось бы:
		либо:
		сделать конструктор для builders.Report объекта NewReport(header, body, footer string) Report.
		И в коде бизнес логики (тут) пришлось бы определять каждый аргументы для конструктора.
		либо:
		создать 2 отдельных класса для отчетов продавца и покупателя.

		И если планируется в дальнейшем изменить структуру чека (например убрать footer), то
		пришлось бы изменять код бизнес логики или же каждого класса. А с применением директора это позволит модифицировать только его
	*/

	// строители отчетов, получаем их через вспомогательную функцию GetBuilder, чтобы было ясно какие типы билдеров есть
	buyerReportBuilder := builders.GetBuilder(builders.Buyer)
	sellerReportBuilder := builders.GetBuilder(builders.Seller)

	/*
		Без применения директора пришлось бы вызывать каждый метод билдера самостоятельно, что требует понимания как работает билдер.
		Директор позволяет абстрагироваться от этого. Директор, в принципе, не обязателен, но может сильно помочь в некоторых случаях.
	*/
	// Так же директор страхует нас от случайного создания полу-инициализированных объектов
	director := builders.NewDirector(buyerReportBuilder)
	// Если понадобится изменить порядок сборки объекта или другие детали, понадобится только вмешательство в функции директора, но не бизнес логики
	buyerReport := director.BuildReport() // здесь вызов всех функция билдера в необходимом порядке

	buyerReport.PrintReport() // Печатаем результат

	fmt.Println() // разделитель

	director.SetBuilder(sellerReportBuilder) // новый билдер для директора
	sellerReport := director.BuildReport()

	sellerReport.PrintReport() // Печатаем результат

	fmt.Println() // разделитель

	// Ручная работа со строителем
	buyerReportBuilder.SetHeader("Azat")
	buyerReportBuilder.SetBody()
	buyerReportBuilder.SetFooter()

	myCustomReport := buyerReportBuilder.GetReport() // получение объекта сборки

	myCustomReport.PrintReport() // Печатаем результат

}
