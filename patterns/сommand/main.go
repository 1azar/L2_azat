package main

import "fmt"

/*
Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты,
позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их,
а также поддерживать отмену операций.

Паттерн Команда предлагает больше не отправлять такие вызовы напрямую. Вместо этого каждый вызов,
отличающийся от других, следует завернуть в собственный класс с единственным методом, который и будет осуществлять вызов.
Такие объекты называют командами.

К объекту интерфейса можно будет привязать объект команды, который знает, кому и в каком виде следует отправлять запросы.
Когда объект интерфейса будет готов передать запрос, он вызовет метод команды, а та — позаботится обо всём остальном.

Применимость:
Когда вы хотите параметризовать объекты выполняемым действием.
 - Команда превращает операции в объекты. А объекты можно передавать, хранить и взаимозаменять внутри других объектов.

Когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети.
 - Как и любые другие объекты, команды можно сериализовать, то есть превратить в строку,
чтобы потом сохранить в файл или базу данных. Затем в любой удобный момент её можно достать обратно,
снова превратить в объект команды и выполнить. Таким же образом команды можно передавать по сети,
логировать или выполнять на удалённом сервере.

Когда вам нужна операция отмены.
 - Главная вещь, которая вам нужна, чтобы иметь возможность отмены операций, — это хранение истории.

Преимущества:
- Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
- Позволяет реализовать простую отмену и повтор операций.
- Позволяет реализовать отложенный запуск операций.
- Позволяет собирать сложные команды из простых.
- Реализует принцип открытости/закрытости.

Недостатки
- Усложняет код программы из-за введения множества дополнительных классов.
*/

func main() {
	tv := &Tv{}

	onCommand := &OnCommand{
		device: tv,
	}

	offCommand := &OffCommand{
		device: tv,
	}

	onButton := &Button{
		command: onCommand,
	}
	onButton.press()

	offButton := &Button{
		command: offCommand,
	}
	offButton.press()
}

// интерфейс команды
type Command interface {
	execute()
}

// интерфейс получателя
type Device interface {
	on()
	off()
}

// получатель
type Tv struct {
	isRunning bool
}

func (t *Tv) on() {
	t.isRunning = true
	fmt.Println("Turning tv on")
}

func (t *Tv) off() {
	t.isRunning = false
	fmt.Println("Turning tv off")
}

// отправитель
type Button struct {
	command Command
}

func (b *Button) press() {
	b.command.execute()
}

// конкретная команда
type OnCommand struct {
	device Device
}

func (c *OnCommand) execute() {
	c.device.on()
}

// конкретная команда
type OffCommand struct {
	device Device
}

func (c *OffCommand) execute() {
	c.device.off()
}
